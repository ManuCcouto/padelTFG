/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.api.apimodel;

import com.api.model.BookingDTO;
import com.api.model.FestiveDTO;
import com.api.model.InlineObject;
import com.api.model.InputResourceDTO;
import com.api.model.ResourceDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-11T15:48:54.752435600+02:00[Europe/Madrid]")
@Validated
@Api(value = "backoffice", description = "the backoffice API")
public interface BackofficeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /backoffice/booking : Add a new or array booking
     * Add a new booking
     *
     * @param inlineObject  (optional)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Add a new or array booking", nickname = "backOfficeAddBooking", notes = "Add a new booking", response = BookingDTO.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "booking","backoffice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = BookingDTO.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/backoffice/booking",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookingDTO> _backOfficeAddBooking(@ApiParam(value = "") @Valid @RequestBody(required = false) InlineObject inlineObject) {
        return backOfficeAddBooking(inlineObject);
    }

    // Override this method
    default  ResponseEntity<BookingDTO> backOfficeAddBooking(InlineObject inlineObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ownerUser\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, \"idBooking\" : 10, \"resourceDTO\" : { \"number\" : 12, \"timeSlot\" : 90, \"name\" : \"Pista central\", \"daysInAdvance\" : 3, \"endTimeSlot\" : \"00:00:00\", \"id\" : 2, \"startTimeSlot\" : \"09:00:00\", \"basePrice\" : 5.5 }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"starDate\" : \"2017-07-21T17:30:00Z\", \"price\" : 0.8008281904610115, \"guessts\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /backoffice/resource : create a new resourceDTO
     * create a new resourceDTO
     *
     * @param inputResourceDTO  (optional)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "create a new resourceDTO", nickname = "createResourceDTO", notes = "create a new resourceDTO", response = ResourceDTO.class, tags={ "resource","backoffice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceDTO.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/backoffice/resource",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResourceDTO> _createResourceDTO(@ApiParam(value = "") @Valid @RequestBody(required = false) InputResourceDTO inputResourceDTO) {
        return createResourceDTO(inputResourceDTO);
    }

    // Override this method
    default  ResponseEntity<ResourceDTO> createResourceDTO(InputResourceDTO inputResourceDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 12, \"timeSlot\" : 90, \"name\" : \"Pista central\", \"daysInAdvance\" : 3, \"endTimeSlot\" : \"00:00:00\", \"id\" : 2, \"startTimeSlot\" : \"09:00:00\", \"basePrice\" : 5.5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /backoffice/festive/{idfestive} : Delete festive
     * This can only be done by the logged in user.
     *
     * @param idfestive The name that needs to be deleted (required)
     * @return Deleted (status code 204)
     *         or Invalid username supplied (status code 400)
     *         or User not found (status code 404)
     */
    @ApiOperation(value = "Delete festive", nickname = "deleteFestive", notes = "This can only be done by the logged in user.", tags={ "festive","backoffice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/backoffice/festive/{idfestive}"
    )
    default ResponseEntity<Void> _deleteFestive(@ApiParam(value = "The name that needs to be deleted", required = true) @PathVariable("idfestive") Integer idfestive) {
        return deleteFestive(idfestive);
    }

    // Override this method
    default  ResponseEntity<Void> deleteFestive(Integer idfestive) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /backoffice/resource/{id} : Delete a resource by ID
     * Delete an existing resource by ID
     *
     * @param id ID of the resource to delete (required)
     * @return Resource deleted successfully (status code 204)
     *         or Invalid resource ID supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Delete a resource by ID", nickname = "deleteResource", notes = "Delete an existing resource by ID", tags={ "resource","backoffice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Resource deleted successfully"),
        @ApiResponse(code = 400, message = "Invalid resource ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Resource not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/backoffice/resource/{id}"
    )
    default ResponseEntity<Void> _deleteResource(@ApiParam(value = "ID of the resource to delete", required = true) @PathVariable("id") Long id) {
        return deleteResource(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteResource(Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /backoffice/festive/{idfestive} : Update festive
     * Change festive selected.
     *
     * @param idfestive festive id to delete (required)
     * @param festiveDTO Update an existent festive (optional)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Update festive", nickname = "updateFestive", notes = "Change festive selected.", tags={ "festive","backoffice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/backoffice/festive/{idfestive}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _updateFestive(@ApiParam(value = "festive id to delete", required = true) @PathVariable("idfestive") Integer idfestive,@ApiParam(value = "Update an existent festive") @Valid @RequestBody(required = false) FestiveDTO festiveDTO) {
        return updateFestive(idfestive, festiveDTO);
    }

    // Override this method
    default  ResponseEntity<Void> updateFestive(Integer idfestive, FestiveDTO festiveDTO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /backoffice/resource/{id} : Update an existing resource
     * Update an existing resource by ID
     *
     * @param id ID of the resource to update (required)
     * @param inputResourceDTO Updated resource information (required)
     * @return OK (status code 200)
     *         or Invalid resource ID supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or Resource not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @ApiOperation(value = "Update an existing resource", nickname = "updateResource", notes = "Update an existing resource by ID", response = ResourceDTO.class, tags={ "resource","backoffice", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResourceDTO.class),
        @ApiResponse(code = 400, message = "Invalid resource ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Resource not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/backoffice/resource/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResourceDTO> _updateResource(@ApiParam(value = "ID of the resource to update", required = true) @PathVariable("id") Long id,@ApiParam(value = "Updated resource information", required = true) @Valid @RequestBody InputResourceDTO inputResourceDTO) {
        return updateResource(id, inputResourceDTO);
    }

    // Override this method
    default  ResponseEntity<ResourceDTO> updateResource(Long id, InputResourceDTO inputResourceDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 12, \"timeSlot\" : 90, \"name\" : \"Pista central\", \"daysInAdvance\" : 3, \"endTimeSlot\" : \"00:00:00\", \"id\" : 2, \"startTimeSlot\" : \"09:00:00\", \"basePrice\" : 5.5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
