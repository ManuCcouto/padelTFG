/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.api.apimodel;

import com.api.model.BookingDTO;
import com.api.model.BookingType;
import com.api.model.InputBookingDTO;
import java.time.OffsetDateTime;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-11T15:48:54.752435600+02:00[Europe/Madrid]")
@Validated
@Api(value = "booking", description = "the booking API")
public interface BookingApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /booking : Add a new booking
     * Add a new booking
     *
     * @param inputBookingDTO Create a new booking (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Add a new booking", nickname = "addBooking", notes = "Add a new booking", response = BookingDTO.class, tags={ "booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = BookingDTO.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/booking",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookingDTO> _addBooking(@ApiParam(value = "Create a new booking", required = true) @Valid @RequestBody InputBookingDTO inputBookingDTO) {
        return addBooking(inputBookingDTO);
    }

    // Override this method
    default  ResponseEntity<BookingDTO> addBooking(InputBookingDTO inputBookingDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ownerUser\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, \"idBooking\" : 10, \"resourceDTO\" : { \"number\" : 12, \"timeSlot\" : 90, \"name\" : \"Pista central\", \"daysInAdvance\" : 3, \"endTimeSlot\" : \"00:00:00\", \"id\" : 2, \"startTimeSlot\" : \"09:00:00\", \"basePrice\" : 5.5 }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"starDate\" : \"2017-07-21T17:30:00Z\", \"price\" : 0.8008281904610115, \"guessts\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /booking/{bookingId} : Delete a booking by ID
     * Delete an existing booking by ID
     *
     * @param bookingId ID of the booking to delete (required)
     * @return Booking deleted successfully (status code 204)
     *         or Invalid booking ID supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or Booking not found (status code 404)
     */
    @ApiOperation(value = "Delete a booking by ID", nickname = "deleteBooking", notes = "Delete an existing booking by ID", tags={ "booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Booking deleted successfully"),
        @ApiResponse(code = 400, message = "Invalid booking ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Booking not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/booking/{bookingId}"
    )
    default ResponseEntity<Void> _deleteBooking(@ApiParam(value = "ID of the booking to delete", required = true) @PathVariable("bookingId") Long bookingId) {
        return deleteBooking(bookingId);
    }

    // Override this method
    default  ResponseEntity<Void> deleteBooking(Long bookingId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /booking/findByType : Finds booking by type
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @param bookingType Tags to filter by (optional)
     * @return successful operation (status code 200)
     *         or Invalid tag value (status code 400)
     */
    @ApiOperation(value = "Finds booking by type", nickname = "findBookingByType", notes = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.", response = BookingDTO.class, responseContainer = "List", tags={ "booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BookingDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid tag value") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/booking/findByType",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BookingDTO>> _findBookingByType(@ApiParam(value = "Tags to filter by") @Valid @RequestParam(value = "bookingType", required = false) List<BookingType> bookingType) {
        return findBookingByType(bookingType);
    }

    // Override this method
    default  ResponseEntity<List<BookingDTO>> findBookingByType(List<BookingType> bookingType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ownerUser\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, \"idBooking\" : 10, \"resourceDTO\" : { \"number\" : 12, \"timeSlot\" : 90, \"name\" : \"Pista central\", \"daysInAdvance\" : 3, \"endTimeSlot\" : \"00:00:00\", \"id\" : 2, \"startTimeSlot\" : \"09:00:00\", \"basePrice\" : 5.5 }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"starDate\" : \"2017-07-21T17:30:00Z\", \"price\" : 0.8008281904610115, \"guessts\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /booking/findByDate : Finds bookings by date
     * Finds bookings that fall between two given dates
     *
     * @param startDate Date from which the filter is applied (required)
     * @param endDate Date from which the filter is applied (required)
     * @return successful operation (status code 200)
     *         or Invalid date value (status code 400)
     *         or Unauthorized Error (status code 401)
     *         or Validation exception (status code 405)
     */
    @ApiOperation(value = "Finds bookings by date", nickname = "findBookingsByDates", notes = "Finds bookings that fall between two given dates", response = BookingDTO.class, responseContainer = "List", tags={ "booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BookingDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid date value"),
        @ApiResponse(code = 401, message = "Unauthorized Error"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/booking/findByDate",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BookingDTO>> _findBookingsByDates(@NotNull @ApiParam(value = "Date from which the filter is applied", required = true) @Valid @RequestParam(value = "startDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,@NotNull @ApiParam(value = "Date from which the filter is applied", required = true) @Valid @RequestParam(value = "endDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate) {
        return findBookingsByDates(startDate, endDate);
    }

    // Override this method
    default  ResponseEntity<List<BookingDTO>> findBookingsByDates(OffsetDateTime startDate, OffsetDateTime endDate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ownerUser\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, \"idBooking\" : 10, \"resourceDTO\" : { \"number\" : 12, \"timeSlot\" : 90, \"name\" : \"Pista central\", \"daysInAdvance\" : 3, \"endTimeSlot\" : \"00:00:00\", \"id\" : 2, \"startTimeSlot\" : \"09:00:00\", \"basePrice\" : 5.5 }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"starDate\" : \"2017-07-21T17:30:00Z\", \"price\" : 0.8008281904610115, \"guessts\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /booking/{bookingId} : Find booking by ID
     * Returns a single booking
     *
     * @param bookingId ID of booking to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Unauthorized operation (status code 401)
     *         or Booking not found (status code 404)
     */
    @ApiOperation(value = "Find booking by ID", nickname = "getBookingById", notes = "Returns a single booking", response = BookingDTO.class, tags={ "booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BookingDTO.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized operation"),
        @ApiResponse(code = 404, message = "Booking not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/booking/{bookingId}",
        produces = { "application/json" }
    )
    default ResponseEntity<BookingDTO> _getBookingById(@ApiParam(value = "ID of booking to return", required = true) @PathVariable("bookingId") Long bookingId) {
        return getBookingById(bookingId);
    }

    // Override this method
    default  ResponseEntity<BookingDTO> getBookingById(Long bookingId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ownerUser\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, \"idBooking\" : 10, \"resourceDTO\" : { \"number\" : 12, \"timeSlot\" : 90, \"name\" : \"Pista central\", \"daysInAdvance\" : 3, \"endTimeSlot\" : \"00:00:00\", \"id\" : 2, \"startTimeSlot\" : \"09:00:00\", \"basePrice\" : 5.5 }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"starDate\" : \"2017-07-21T17:30:00Z\", \"price\" : 0.8008281904610115, \"guessts\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /booking/{bookingId} : Update an existing booking
     * Update an existing booking by id
     *
     * @param bookingId ID of the booking to update (required)
     * @param inputBookingDTO Updated booking information (required)
     * @return OK (status code 200)
     *         or Invalid booking ID supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or Booking not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @ApiOperation(value = "Update an existing booking", nickname = "updateBooking", notes = "Update an existing booking by id", response = BookingDTO.class, tags={ "booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BookingDTO.class),
        @ApiResponse(code = 400, message = "Invalid booking ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Booking not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/booking/{bookingId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookingDTO> _updateBooking(@ApiParam(value = "ID of the booking to update", required = true) @PathVariable("bookingId") Long bookingId,@ApiParam(value = "Updated booking information", required = true) @Valid @RequestBody InputBookingDTO inputBookingDTO) {
        return updateBooking(bookingId, inputBookingDTO);
    }

    // Override this method
    default  ResponseEntity<BookingDTO> updateBooking(Long bookingId, InputBookingDTO inputBookingDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ownerUser\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, \"idBooking\" : 10, \"resourceDTO\" : { \"number\" : 12, \"timeSlot\" : 90, \"name\" : \"Pista central\", \"daysInAdvance\" : 3, \"endTimeSlot\" : \"00:00:00\", \"id\" : 2, \"startTimeSlot\" : \"09:00:00\", \"basePrice\" : 5.5 }, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"starDate\" : \"2017-07-21T17:30:00Z\", \"price\" : 0.8008281904610115, \"guessts\" : { \"firstName\" : \"John\", \"lastName\" : \"James\", \"phone\" : \"12345\", \"id\" : 10, \"email\" : \"john@email.com\", \"username\" : \"theUser\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
