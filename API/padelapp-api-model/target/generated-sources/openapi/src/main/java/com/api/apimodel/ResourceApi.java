/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.api.apimodel;

import com.api.model.ResourceDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-11T15:48:54.752435600+02:00[Europe/Madrid]")
@Validated
@Api(value = "resource", description = "the resource API")
public interface ResourceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /resource/{id} : Get resource by ID
     * Returns a single resource by ID
     *
     * @param id ID of the resource to return (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Unauthorized operation (status code 401)
     *         or Resource not found (status code 404)
     */
    @ApiOperation(value = "Get resource by ID", nickname = "getResourceById", notes = "Returns a single resource by ID", response = ResourceDTO.class, tags={ "resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = ResourceDTO.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 401, message = "Unauthorized operation"),
        @ApiResponse(code = 404, message = "Resource not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/resource/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResourceDTO> _getResourceById(@ApiParam(value = "ID of the resource to return", required = true) @PathVariable("id") Long id) {
        return getResourceById(id);
    }

    // Override this method
    default  ResponseEntity<ResourceDTO> getResourceById(Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 12, \"timeSlot\" : 90, \"name\" : \"Pista central\", \"daysInAdvance\" : 3, \"endTimeSlot\" : \"00:00:00\", \"id\" : 2, \"startTimeSlot\" : \"09:00:00\", \"basePrice\" : 5.5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
